name: CI/CD
 
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
 
jobs:
  build:
    environment: CI
    runs-on: ubuntu-latest
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
 
      - name: Docker configuration
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
 
      - name: Build DB
        run: docker build -t andydck/db:latest .

      - name: Build server
        run: docker build -t andydck/backend:latest .
 
      - name: Push db to Docker
        run: docker push andydck/db:latest

      - name: Push server to Docker
        run: docker push andydck/backend:latest
 
  deploy:
    environment: CI
    runs-on: ubuntu-latest
    needs: build  # Assurez-vous que le job de build soit terminé
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
 
      - name: Deploy to VPS
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
        run: |
         echo "${SSH_PRIVATE_KEY}" > key.pem
         chmod 600 key.pem
         # SSH into the VPS to execute Docker commands
         ssh -o StrictHostKeyChecking=no -i key.pem ${VPS_USERNAME}@${VPS_HOST} << 'EOF'
         
         # Pull the latest Docker image
         docker pull andydck/db:latest
         docker pull andydck/backend:latest
         
         # Exécuter le conteneur de la base de données
         docker run -d --name db_container \
           -e POSTGRES_USER="postgres" \
           -e POSTGRES_PASSWORD="root" \
           -e POSTGRES_DB="time_manager_dev" \
           -p 54321:5432 andydck/db:latest
         
         # Exécuter le conteneur du backend
         docker run -d --name backend_container \
           -e PGUSER="postgres" \
           -e PGPASSWORD="root" \
           -e PGDATABASE="time_manager_dev" \
           -e PGHOST="db" \
           -e PGPORT="5432" \
           -e DATABASE_URL="ecto://postgres:root@db:5432/time_manager_dev" \
           -p 4000:4000 andydck/backend:latest

         
         # Optional: Wait for the container to start and check the status
         sleep 10  # Give some time for the service to start
         if docker ps | grep "backend"; then
          echo "Service is up and running!"
         else
          echo "Service failed to start"
          exit 1
         fi
         EOF
